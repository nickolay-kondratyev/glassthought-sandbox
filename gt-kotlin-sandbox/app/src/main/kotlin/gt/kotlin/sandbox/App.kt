/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package gt.kotlin.sandbox

import java.text.SimpleDateFormat
import java.util.*
import kotlinx.coroutines.*

class ThreadUtils {
    companion object {
        private var lastTime: Long = System.currentTimeMillis()

        fun printWithThreadInfo(msg: String) {
            val thread = Thread.currentThread()
            val threadName = thread.name
            val threadId = thread.id
            val timestamp = SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").format(Date())
            val currentTime = System.currentTimeMillis()
            val elapsedMillis = currentTime - lastTime
            println("[$timestamp][$threadName-$threadId][${elapsedMillis}ms] $msg")
            lastTime = currentTime
        }

        fun sleep(millis: Long){
            Thread.sleep(millis)
        }
    }
}


suspend fun performNetworkRequest(msg:String): String {
    return withContext(Dispatchers.IO) {
        ThreadUtils.printWithThreadInfo("Within withContext{} (before sleep) input: " + msg)
        ThreadUtils.sleep(500)

        String.format("MessageResultAfterBlockinOperation for [%s]", msg)
    }
}

fun main() {

    ThreadUtils.printWithThreadInfo("WarmUpStatement: Example showing main thread waiting for co-routine to finish before moving on to the next statement.")

    val mainMillisStamp=System.currentTimeMillis();

    ThreadUtils.printWithThreadInfo("within main() before runBlocking {}")

    runBlocking {
        ThreadUtils.printWithThreadInfo("1st print within runBlocking{}")
        ThreadUtils.printWithThreadInfo("2nd print within runBlocking{}")
        val result1 = performNetworkRequest("1st-request")
        ThreadUtils.printWithThreadInfo("print within main thread right after 1st-network request.")
        val result2 = performNetworkRequest("2nd-request")
        ThreadUtils.printWithThreadInfo(result1)
        ThreadUtils.printWithThreadInfo(result2)
        ThreadUtils.printWithThreadInfo(
            "Total time taken: " +
                    (System.currentTimeMillis() - mainMillisStamp) + "ms")
    }
}
