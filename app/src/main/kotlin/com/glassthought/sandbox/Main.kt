/*
 * This source file was generated by the Gradle 'init' task
 */
package com.glassthought.sandbox

class RaceConditionInducer {
  private var value = 0

  // @Synchronized // would fix this example race condition.
  fun incrementValue() {
    val storedValue = value

    Thread.sleep(10)

    println("Incrementing value from storedValue=$storedValue to ${storedValue + 1}")
    value = storedValue + 1
  }

  fun getValue() = value
}

fun main() {
  val raceConditionInducer = RaceConditionInducer()

  val threads = (1..10).map {
    Thread { raceConditionInducer.incrementValue() }
  }
  threads.forEach { it.start() }
  threads.forEach { it.join() }

  println("Value: ${raceConditionInducer.getValue()}")
}
